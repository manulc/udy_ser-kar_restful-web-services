<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.1.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	
	<groupId>com.mlorenzo.app.ws</groupId>
	<artifactId>mobile-app-ws</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>mobile-app-ws</name>
	<description>Demo project for Spring Boot</description>
	<packaging>jar</packaging>
	
	<properties>
		<java.version>11</java.version>
		<!-- Con esta propiedad y este valor, actualizamos la versión del plugin de Maven "maven-surefire-plugin" para poder ejecutar los tests de Junit 5 desde la línea de comandos usando Maven -->
		<maven-surefire-plugin.version>2.22.0</maven-surefire-plugin.version>
		<!-- Con esta propiedad y este valor, actualizamos la versión de Mockito porque la versión que trae por defecto la versión 2.0.1 de Spring Boot que estamos usando no es compatible con la versión 11 o superiror de Java -->
		<mockito.version>2.22.0</mockito.version>
		<!-- Con esta propiedad y este valor, actualizamos la versión de la dependencia "junit-jupiter-engine" para poder usar anotaciones como @TestMethodOrder y, de esta forma, poder ordenar la ejecución de los tests -->
		<junit-jupiter.version>5.4.0</junit-jupiter.version>
		<springfox.version>2.9.2</springfox.version>
	</properties>
	
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- Si se desea desplegar esta aplicación como un war en un servidor Tomcat remoto(externo), tenemos que sobrescribir esta dependencia
		     que se encuentra dentro de la dependencia "spring-boot-starter-web" para cambiar el ámbito o scope a "provided" y, de esta forma,
		     no incluimos en el war el servidor Tomcat embebido(interno) porque vamos a usar otro externo  -->
		<!--<dependency>
      		<groupId>org.springframework.boot</groupId>
      		<artifactId>spring-boot-starter-tomcat</artifactId>
      		<scope>provided</scope>
    	</dependency>-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
      		<artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
      		<groupId>org.springframework.boot</groupId>
      		<artifactId>spring-boot-starter-security</artifactId>
    	</dependency>
    	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
			    <!-- Excluimos esta dependencia porque vamos a usar Junit 5 -->
				<exclusion>
					<groupId>junit</groupId>
      				<artifactId>junit</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
		    <groupId>org.springframework.security</groupId>
		    <artifactId>spring-security-test</artifactId>
		    <scope>test</scope>
    	</dependency>
		<dependency>
    		<groupId>com.h2database</groupId>
   			<artifactId>h2</artifactId>
    		<!--<scope>runtime</scope>-->
    		<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
    	<dependency>
		    <groupId>io.jsonwebtoken</groupId>
		    <artifactId>jjwt</artifactId>
		    <version>0.9.0</version>
		</dependency>
		<!-- Dependencia para que la aplicación soporte la recepción y el envío de datos en formato XML -->
		<dependency>
    		<groupId>com.fasterxml.jackson.dataformat</groupId>
    		<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
		<dependency>
		  	<groupId>javax.xml.bind</groupId>
		  	<artifactId>jaxb-api</artifactId>
		</dependency>
		<!-- Soluciona el error "org.hibernate.MappingException: Could not get constructor for org.hibernate.persister.entity.SingleTableEntityPersister" que ocurre en esta versión de Spring Boot usando la versión 11 de Java -->
		<dependency>
		    <groupId>org.javassist</groupId>
		    <artifactId>javassist</artifactId>
		    <version>3.23.1-GA</version>
		</dependency>
		<dependency>
		  	<groupId>org.modelmapper</groupId>
		  	<artifactId>modelmapper</artifactId>
		  	<version>2.0.0</version>
		</dependency>
		<dependency>
		    <groupId>io.springfox</groupId>
		    <artifactId>springfox-swagger2</artifactId>
		    <version>${springfox.version}</version>
		</dependency>
		<dependency>
		    <groupId>io.springfox</groupId>
		    <artifactId>springfox-swagger-ui</artifactId>
		    <version>${springfox.version}</version>
		</dependency>
		<dependency>
			<groupId>me.paulschwarz</groupId>
			<artifactId>spring-dotenv</artifactId>
			<version>2.5.4</version>
		</dependency>
		<!-- Añadimos soporte para Junit 5 debido a que la versión 2.0.1 de Spring Boot que estamos usando utiliza Junit 4  -->
		<dependency>
    		<groupId>org.junit.jupiter</groupId>
   		 	<artifactId>junit-jupiter-engine</artifactId>
    		<scope>test</scope>
		</dependency>
    	<dependency>
		    <groupId>io.rest-assured</groupId>
		    <artifactId>rest-assured</artifactId>
		    <scope>test</scope>
		</dependency>
		<dependency>
		    <groupId>com.icegreen</groupId>
		    <artifactId>greenmail-junit5</artifactId>
		    <version>1.6.14</version>
		    <scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
